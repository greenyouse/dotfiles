#!/bin/bash

# A basic backup/deploy script for great sanity

dotdir="${HOME}/.config/dotfiles"
RED='\u001b[31m'

function color-text () {
    printf "${1} \u001b[0m\n\n"
}

function alert () {
    color-text "${RED} ${1}"
}

function help () {
    echo $'Usage: woot [options]\n'
    echo $'Options:\n install {server|client|mac}\n backup [backup-directory]\n'
}

# check that a second arg was given otherwise throw with the err msg
function error () {
    if [[ -z $2 ]]; then
        help
        alert "${1}"
        exit 1
    fi
}

# detects the OS/distro and calls the relevant client/server install script
function pkg-installer () {
    os_str=`uname -s`
    case $os_str in
        *Linux*)
            # find the GNU/Linux distro and install
            dist_str=`cat /etc/*-release | uniq -u | grep ^NAME=`
            case $dist_str in
                *Lubuntu*)
                    . $1/lubuntu.sh;;
                *Ubuntu*)
                    . $1/ubuntu.sh;;
                *)
                    echo "distro ${dist_str} not set up yet";;
            esac;;
        # FreeBSD)
        # ;;
        # OpenBSD)
        # ;;
        *Darwin*) # OSX
        . $1/mac.sh ;;
        *)
            echo "${os_str} not set up yet";;
    esac
}

function link-to-home () {
    ln -s "${dotdir}/${1}" "~/${1}"
}

# TODO add another script for VPNs + private files like ssh
# still need ssh, etc. on server
# old school network-manager configs for clients
function install () {

    case $1 in
        server)
            pkg-installer server;;
        client)
            pkg-installer client;;
        mac)
            pkg-installer mac;;
        *)
            help
            error "Specify install target: {client|server|mac}"
            return 0;;
    esac

    # FIXME: add backup prefix to $file here
    # echo "Writing files from backup"
    # for dir in `cat backup.list`; do
    #     destination=`dirname ${dir}`
    #     file=`basename ${dir}`
    #     eval 'rsync -avz ${file} ${destination}'
    # done

    printf 'Linking dotfiles\n\n'
    link-to-home .emacs.d
    link-to-home .emacs-live.el
    link-to-home .live-packs
    link-to-home .bashrc
    link-to-home .profile
    link-to-home .ackrc

    eval 'cowsay "Install complete!"'
}

function backup () {
    error $1 "No backup directory given"

    printf "Backing up to ${1}\n\n"
    for dir in `cat backup.list`; do
        eval "rsync -avz ${dir} ${1}"
    done

    eval 'cowsay "Backup complete!"'
}

function uninstall () {

    # get rid of $HOME links
    for dotfile in `find ${dotdir} -maxdepth 1 -name '.[a-zA-Z0-9]*' -printf '%f\0 '`; do
        unlink "~/${dotfile}"
    done

    # remove these dotfiles and nix
    rm -rf ~/.config/dotfiles

    echo "Dotfiles removed"
}

case $1 in
    install)
        install $2;;
    backup)
        backup $2 $3;;
    uninstall)
        uninstall;;
    *)
        help;;
esac
